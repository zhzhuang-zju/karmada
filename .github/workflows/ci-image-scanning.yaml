#name: image-scanning
#on:
#  push:
#jobs:
#  use-trivy-to-scan-image:
#    name: image-scanning
#    if: ${{ github.repository == 'karmada-io/karmada' }}
#    runs-on: ubuntu-22.04
#    strategy:
#      fail-fast: false
#      matrix:
#        target:
#          - karmada-controller-manager
#          - karmada-scheduler
#          - karmada-descheduler
#          - karmada-webhook
#          - karmada-agent
#          - karmada-scheduler-estimator
#          - karmada-interpreter-webhook-example
#          - karmada-aggregated-apiserver
#          - karmada-search
#          - karmada-operator
#          - karmada-metrics-adapter
#    steps:
#      - name: checkout code
#        uses: actions/checkout@v3
#      - name: Build an image from Dockerfile
#        run: |
#          export VERSION="latest"
#          export REGISTRY="docker.io/karmada"
#          make image-${{ matrix.target }}
#      - name: Run Trivy vulnerability scanner
#        uses: aquasecurity/trivy-action@0.12.0
#        with:
#          image-ref: 'docker.io/karmada/${{ matrix.target }}:latest'
#          format: 'sarif'
#          ignore-unfixed: true
#          vuln-type: 'os,library'
#          output: 'trivy-results.sarif'
#      - name: display scan results
#        uses: aquasecurity/trivy-action@0.12.0
#        with:
#          image-ref: 'docker.io/karmada/${{ matrix.target }}:latest'
#          format: 'table'
#          ignore-unfixed: true
#          vuln-type: 'os,library'
#      - name: Upload Trivy scan results to GitHub Security tab
#        uses: github/codeql-action/upload-sarif@v2
#        with:
#          sarif_file: 'trivy-results.sarif'

name: image-scanning-on-schedule
on:
  pull_request:
jobs:
  use-trivy-to-scan-image:
    name: image-scanning
    # prevent job running from forked repository
    #if: ${{ github.repository == 'zhzhuang-zju/karmada' }}
    runs-on: ubuntu-22.04
    steps:
      - name: checkout code
        uses: actions/checkout@v3
      - name: install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.20.11
      - name: Build images from Dockerfile
        run: |
          export VERSION=latest
          export REGISTRY="docker.io/karmada"
          make images GOOS="linux" --directory=.
      - name: install trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
      - name: Run Trivy vulnerability scanner
        run: |
          imageIds=(`docker images -q`)
          mkdir trivy
          for id in ${imageIds[@]}
          do 
            image=$(docker images|grep $id| sed 's/[ ][ ]*/,/g')
            IFS=","
            imageInfo=($image)
            if [[ ${imageInfo[0]} == *karmada-* ]]
            then
              imageref="${imageInfo[0]}:${imageInfo[1]}"
              trivy image --format table --ignore-unfixed --vuln-type os,library --severity  UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL --output trivy/trivy-$id.table $imageref
            fi
          done
      - name: display scan results
        run: |
          cat trivy/*.table
    
